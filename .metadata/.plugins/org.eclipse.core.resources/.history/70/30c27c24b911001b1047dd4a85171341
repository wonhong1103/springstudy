package com.ict.controller;

import java.io.BufferedInputStream;
import java.io.File;
import java.io.FileInputStream;
import java.io.OutputStream;
import java.net.URLEncoder;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import javax.inject.Inject;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import javax.servlet.http.HttpSession;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.util.FileCopyUtils;
import org.springframework.web.bind.annotation.ModelAttribute;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.multipart.MultipartFile;
import org.springframework.web.servlet.ModelAndView;

import com.ict.db.CVO;
import com.ict.db.DAO;
import com.ict.db.MVO;
import com.ict.db.RVO;
import com.ict.db.R_CVO;
import com.ict.db.VO;
import com.ict.model.Paging;

@Controller
public class MyController {
	@Autowired
	private DAO dao;
	@Inject
	private Paging paging;

	public void setDao(DAO dao) {
		this.dao = dao;
	}
	public void setPaging(Paging paging) {
		this.paging = paging;
	}
	
	@RequestMapping(value="home.do", method=RequestMethod.GET)
	public ModelAndView home_Cmd() {
		return new ModelAndView("home");		
	}
	
	@RequestMapping(value="login.do", method=RequestMethod.GET)
	public ModelAndView loginCommand() {
		return new ModelAndView("member/login");
	}
	
	@RequestMapping("login_ok.do")
	public ModelAndView logInOKCommand(MVO m_vo, HttpSession session) {
		ModelAndView mv  = new ModelAndView();
		try {
			// 로그인 처리 
			MVO mvo = dao.getLogIn(m_vo);
			if(mvo != null) {
				session.setAttribute("mvo", mvo);
				session.setAttribute("login", "ok");
				if(mvo.getM_id().equals("admin")) {
					session.setAttribute("admin", "ok");
					mv.setViewName("redirect:admin.do");
					return mv;
				}
			}
		} catch (Exception e) {
			System.out.println(e);
		}
		return mv;
	}
	@RequestMapping("logout.do")
	public ModelAndView logoutCommand(HttpSession session) {
		session.invalidate();
		return new ModelAndView("redirect:home");
	}
	@RequestMapping(value="join.do", method=RequestMethod.GET)
	public ModelAndView joinCommand() {
		return new ModelAndView("member/join");
	}
	
	@RequestMapping(value="findidpw.do", method=RequestMethod.GET)
	public ModelAndView findidpwCommand() {
		return new ModelAndView("member/findidpw");
	}
	
	@RequestMapping("findid_ok.do")
	public ModelAndView findidCommand() {
		ModelAndView mv = new ModelAndView();
			try {				
				mv.setViewName("member/findidpw");				
			} catch (Exception e) {
				System.out.println(e);
			}		
		return mv;
	}
	@RequestMapping("findpw_ok.do")
	public ModelAndView findpwCommand() {
		ModelAndView mv = new ModelAndView();
		try {			
			mv.setViewName("member/login");
		} catch (Exception e) {
			System.out.println(e);
		}
	return mv;
	}
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	@RequestMapping(value="cart.do", method=RequestMethod.GET)
	public ModelAndView cartCommand(@RequestParam("m_id")String m_id) {
		ModelAndView mv = new ModelAndView("cart/cartlist");
		try {
			List<CVO> cartList = dao.getCartList(m_id);
			mv.addObject("cartlist", cartList);
		} catch (Exception e) {
			System.out.println(e);
		}
		return mv; 
	}
	
	
	@RequestMapping("delproduct.do")
	public ModelAndView delProductCommand(CVO cvo) {
		ModelAndView mv = 
				new ModelAndView("redirect:viewcart.do?m_id="+cvo.getId());
		try {
			dao.getCartDel(cvo);
		} catch (Exception e) {
			System.out.println(e);
		}
		return mv;
	}
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	// 리뷰
	String cPage;
	@RequestMapping("reviewList.do")
	public ModelAndView reviewListCommand(HttpServletRequest request) {
		ModelAndView mv = new ModelAndView("Review/R_list");
		try {
			//1. 전체 게시물의 수
			int count = dao.reviewGetTotalCount();
			paging.setTotalRecord(count);
			
			// 2. 전체 페이지의 수
			if(paging.getTotalRecord() <= paging.getNumPerPage()) {
				paging.setTotalPage(1);
			}else {
				paging.setTotalPage(paging.getTotalRecord()/paging.getNumPerPage());
				if(paging.getTotalRecord()%paging.getNumPerPage() != 0) {
					paging.setTotalPage(paging.getTotalPage()+1);
				}
			}
			// 3. cPage
			String cPage = request.getParameter("cPage");
			if(cPage == null) {
				paging.setNowPage(1);
			}else {
				paging.setNowPage(Integer.parseInt(cPage));
			}
			
			// 4. 시작번호, 끝번호
			paging.setBegin((paging.getNowPage()-1)* paging.getNumPerPage()+1);
			paging.setEnd((paging.getBegin()-1)+paging.getNumPerPage());
			
			// 5. 시작 블록 , 끝블록
			paging.setBeginBlock((int)((paging.getNowPage()-1)/paging.getPagePerBlock()) * paging.getPagePerBlock()+1);
			paging.setEndBlock(paging.getBeginBlock()+paging.getPagePerBlock()-1);
			
			// 6. 주의 사항
			if(paging.getEndBlock() > paging.getTotalPage()) {
				paging.setEndBlock(paging.getTotalPage());
			}
			
			List<RVO> list = dao.reviewGetList(paging.getBegin(), paging.getEnd());
		
			mv.addObject("list", list);
			mv.addObject("paging",paging);
		} catch (Exception e) {
			System.out.println(e);
		}
		return mv;
	}
	
	@RequestMapping("reviewWrite.do")
	public ModelAndView reviewWriteCommand() {
		return new ModelAndView("Review/R_write");
	}
	
	@RequestMapping(value = "Reviewwrite_ok.do", method = RequestMethod.POST)
	public ModelAndView reviewWriteOKCommand(RVO rvo, HttpSession session, HttpServletRequest request) {
		ModelAndView mv = new ModelAndView("redirect:reviewList.do");
		try {
			String path = session.getServletContext().getRealPath("/resources/upload");
			MultipartFile file = rvo.getFile();
			// 추가 
			rvo.setM_id((String)request.getSession().getAttribute("log_id"));
			if(file.isEmpty()) {
				rvo.setFile_name("");
			}else {
				rvo.setFile_name(file.getOriginalFilename());
			}
			int result = dao.reviewGetInsert(rvo);
			if(result>0) {
				file.transferTo(new File(path+"/"+rvo.getFile_name()));
			}
		} catch (Exception e) {
			System.out.println(e);
		}
		return mv;
	}
	@RequestMapping("reviewOnelist.do")
	public ModelAndView reviewOneListCommand(HttpServletRequest request) {
		ModelAndView mv = new ModelAndView("Review/R_onelist");
		try {
			String r_idx = request.getParameter("r_idx");
			String cPage = request.getParameter("cPage");
			
			// hint update
			dao.reviewGetHitUpdate(r_idx);
			
			// 상세보기 
			RVO rvo = dao.reviewGetOneList(r_idx);
			
			// 세션에 저장
			request.getSession().setAttribute("rvo",rvo);
			
			// 댓글 가져오기 
			List<R_CVO> c_list = dao.getCommList(r_idx);
			
			// cPage 저장
			mv.addObject("cPage", cPage);
		} catch (Exception e) {
			System.out.println(e);
		}
		return mv;
	}
	@RequestMapping("reviewDownload.do")
	public void reviewFileDown(HttpServletRequest request, 
			HttpServletResponse response) {
		try {
			String file_name = request.getParameter("file_name");
			String path = request.getSession().getServletContext()
					.getRealPath("/resources/upload/"+file_name);
			// 브라우저 설정
			response.setContentType("application/x-msdownload");
			response.setHeader("Content-Disposition",
			"attachment; filename = "+URLEncoder.encode(file_name,"utf-8"));
			
			// 실제 다운로드
			File file = new File(new String(path.getBytes()));
			FileInputStream fis = new FileInputStream(file);
			BufferedInputStream in = new BufferedInputStream(fis);			
			OutputStream out = response.getOutputStream();
			FileCopyUtils.copy(in, out);
			
		} catch (Exception e) {
			System.out.println(e);
		}
	}
	
	@RequestMapping("reviewUpdate.do")
	public ModelAndView updateCommand(@ModelAttribute("cPage")String cPage) {
		ModelAndView mv = new ModelAndView("Review/R_update");
		return mv;
	}
	
	@RequestMapping(value="reviewUpdate_ok.do", method=RequestMethod.POST)
	public ModelAndView update_okCommand(RVO rvo, HttpServletRequest request) {
		String cPage = request.getParameter("cPage");
		String idx = request.getParameter("idx");
		String f_name = request.getParameter("f_name");
		rvo.setIdx(idx);
		
		ModelAndView mv 
		= new ModelAndView("redirect:reviewOnelist.do?cPage="+cPage+"&idx="+rvo.getIdx());
		try {
			String path = request.getSession()
					.getServletContext().getRealPath("/resources/upload");
			
			MultipartFile file = rvo.getFile();
			if(file.isEmpty()) {
				rvo.setFile_name(f_name);
			}else {
				rvo.setFile_name(rvo.getFile().getOriginalFilename());
			}
			
			int result = dao.reviewGetUpdate(rvo);
			if(result>0) {
				file.transferTo(new File(path+"/"+rvo.getFile_name()));
			}
		} catch (Exception e) {
			System.out.println(e);
		}		
		return mv;
	}	
	
	@RequestMapping("reviewDelete.do")
	public ModelAndView reviewDeleteCommand(@ModelAttribute("cPage")String cPage) {
		return new ModelAndView("board/R_delete");
	}
	
	@RequestMapping("reviewDelete_ok.do")
	public ModelAndView reviewDelete_okCommand(HttpSession session, @RequestParam("cPage")String cPage) {
		ModelAndView mv = new ModelAndView("redirect:reviewList.do?cPage="+cPage);
		System.out.println("cPage="+cPage);
		try {
			RVO rvo = (RVO) session.getAttribute("bvo");
			dao.reviewGetDelete(rvo.getIdx());
		}catch (Exception e) {
			return new ModelAndView("error");
		}
		return mv;
	}
	
	
	@RequestMapping("reviewAns_write.do")
	public ModelAndView reviewAns_writeCommand(@ModelAttribute("cPage")String cPage) {
		return new ModelAndView("R_ans_write");
	}
	
	@RequestMapping(value = "reviewAns_write_ok.do", method = RequestMethod.POST)
	public ModelAndView reviewAns_writeOKCommand(RVO rvo, HttpSession session, @ModelAttribute("cPage")String cPage) {
		ModelAndView mv = new ModelAndView("redirect:reviewList.do");
		try {
			int lev = Integer.parseInt(rvo.getLev());
			int step = Integer.parseInt(rvo.getStep());
			int groups = Integer.parseInt(rvo.getGroups());
			
			step++;
			lev++;
			
			// DB에 groups, lev를 이용해서 업데이트 한다.
			// groups이 같은 원글 찾아서 레벨이 같거나 크면  레벨 증가 
			Map<String, Integer> map = new HashMap<String, Integer>();
			map.put("groups", groups);
			map.put("lev", lev);
			
			dao.reviewGetLevUp(map);
			
			rvo.setStep(String.valueOf(step));
			rvo.setLev(String.valueOf(lev));
			
			// 댓글 삽입
			String path = session.getServletContext()
					.getRealPath("/resources/upload");
			MultipartFile file = rvo.getFile();
			if(file.isEmpty()) {
				rvo.setFile_name("");
			}else {
				rvo.setFile_name(file.getOriginalFilename());
			}
			int result = dao.reviewGetAnsInsert(rvo);
			if(result>0) {
				file.transferTo(new File(path+"/"+rvo.getFile_name()));
			}
		} catch (Exception e) {
			System.out.println(e);
		}
		return mv;
	}
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
}
