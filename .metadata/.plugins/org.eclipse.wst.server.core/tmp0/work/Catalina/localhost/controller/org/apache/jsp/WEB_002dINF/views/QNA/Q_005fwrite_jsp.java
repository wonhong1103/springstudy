/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/9.0.36
 * Generated at: 2020-10-26 08:05:04 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp.WEB_002dINF.views.QNA;

import javax.servlet.*;
import javax.servlet.http.*;
import javax.servlet.jsp.*;

public final class Q_005fwrite_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent,
                 org.apache.jasper.runtime.JspSourceImports {

  private static final javax.servlet.jsp.JspFactory _jspxFactory =
          javax.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  private static final java.util.Set<java.lang.String> _jspx_imports_packages;

  private static final java.util.Set<java.lang.String> _jspx_imports_classes;

  static {
    _jspx_imports_packages = new java.util.HashSet<>();
    _jspx_imports_packages.add("javax.servlet");
    _jspx_imports_packages.add("javax.servlet.http");
    _jspx_imports_packages.add("javax.servlet.jsp");
    _jspx_imports_classes = null;
  }

  private volatile javax.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public java.util.Set<java.lang.String> getPackageImports() {
    return _jspx_imports_packages;
  }

  public java.util.Set<java.lang.String> getClassImports() {
    return _jspx_imports_classes;
  }

  public javax.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
  }

  public void _jspDestroy() {
  }

  public void _jspService(final javax.servlet.http.HttpServletRequest request, final javax.servlet.http.HttpServletResponse response)
      throws java.io.IOException, javax.servlet.ServletException {

    if (!javax.servlet.DispatcherType.ERROR.equals(request.getDispatcherType())) {
      final java.lang.String _jspx_method = request.getMethod();
      if ("OPTIONS".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        return;
      }
      if (!"GET".equals(_jspx_method) && !"POST".equals(_jspx_method) && !"HEAD".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, "JSP들은 오직 GET, POST 또는 HEAD 메소드만을 허용합니다. Jasper는 OPTIONS 메소드 또한 허용합니다.");
        return;
      }
    }

    final javax.servlet.jsp.PageContext pageContext;
    javax.servlet.http.HttpSession session = null;
    final javax.servlet.ServletContext application;
    final javax.servlet.ServletConfig config;
    javax.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    javax.servlet.jsp.JspWriter _jspx_out = null;
    javax.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html; charset=UTF-8");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write("\r\n");
      out.write("<!DOCTYPE html>\r\n");
      out.write("<html>\r\n");
      out.write("<head>\r\n");
      out.write("<meta charset=\"UTF-8\">\r\n");
      out.write("<title>QnA 작성</title>\r\n");
      out.write("<style type=\"text/css\">\r\n");
      out.write("\t.qna_wrap {width:100%; height:80%; padding-top:5%;}\r\n");
      out.write("\t.qna_wrap table {\r\n");
      out.write("\t    width:800px;\r\n");
      out.write("\t    margin:0 auto;\r\n");
      out.write("\t    border:1px solid black;\r\n");
      out.write("\t    border-collapse:collapse;\r\n");
      out.write("\t    font-size:14px;\r\n");
      out.write("\t    \r\n");
      out.write("\t}\r\n");
      out.write("\t\r\n");
      out.write("\t.qna_wrap table caption {\r\n");
      out.write("\t    font-size:20px;\r\n");
      out.write("\t    font-weight:bold;\r\n");
      out.write("\t    margin-bottom:10px;\r\n");
      out.write("\t}\r\n");
      out.write("\t\r\n");
      out.write("\t.qna_wrap table th, tbody {\r\n");
      out.write("\t    text-align:left;\r\n");
      out.write("\t    border:1px solid black;\r\n");
      out.write("\t    padding:4px 10px;\r\n");
      out.write("\t}\r\n");
      out.write("\t.qna_wrap table td, tbody {\r\n");
      out.write("\t    text-align:left;\r\n");
      out.write("\t    border:1px solid black;\r\n");
      out.write("\t    padding:4px 10px;\r\n");
      out.write("\t}\r\n");
      out.write("\t.qna_wrap th{\r\n");
      out.write("\t\tbackground-color:#dedede\r\n");
      out.write("\t}\r\n");
      out.write("\t\r\n");
      out.write("</style>\r\n");
      out.write("<script type=\"text/javascript\">\r\n");
      out.write("function qnaList_go(f) {\r\n");
      out.write("\tf.action=\"qnaList.do\"\r\n");
      out.write("\tf.submit();\t\t\t\t\r\n");
      out.write("}\r\n");
      out.write("\tfunction qnaSend_go(f) {\r\n");
      out.write("\t\t// 유효성 검사\r\n");
      out.write("\t\tfor (var i = 0; i < f.elements.length; i++) {\r\n");
      out.write("\t\t\tif(f.elements[i].value==\"\"){\r\n");
      out.write("\t\t\t\tif(i==2 || i==3) continue;  // 제외 시킬 때 사용 \r\n");
      out.write("\t\t\t\talert(f.elements[i].name+\"를 입력하세요\");\r\n");
      out.write("\t\t\t\tf.elements[i].focus();\r\n");
      out.write("\t\t\t\treturn;\r\n");
      out.write("\t\t\t}\r\n");
      out.write("\t\t}\r\n");
      out.write("\t\tf.action=\"qnaWrite_ok.do\";\r\n");
      out.write("\t\tf.submit();\r\n");
      out.write("\t}\r\n");
      out.write("</script>\r\n");
      out.write("</head>\r\n");
      out.write("<body>\r\n");
      out.write("\t");
      org.apache.jasper.runtime.JspRuntimeLibrary.include(request, response, "../frame/header.jsp", out, false);
      out.write("\t\r\n");
      out.write("\r\n");
      out.write("\t<!-- QnA -->\r\n");
      out.write("\t<div class=\"qna_wrap\">\r\n");
      out.write("\t<form method=\"post\" encType=\"multipart/form-data\">\r\n");
      out.write("\t\t<table class=\"q_write\">\r\n");
      out.write("\t\t\t<caption>QnA 작성하기</caption>\r\n");
      out.write("\t\t\t<tbody>\r\n");
      out.write("\t\t\t\t<tr>\r\n");
      out.write("\t\t\t\t\t<th>제목:</th>\r\n");
      out.write("\t\t\t\t\t<td><input type=\"text\" name=\"subject\" size=\"45\"/></td>\r\n");
      out.write("\t\t\t\t</tr>\r\n");
      out.write("\t\t\t\t<tr>\r\n");
      out.write("\t\t\t\t\t<th>이름:</th>\r\n");
      out.write("\t\t\t\t\t<td><input type=\"text\" name=\"writer\" size=\"12\"/></td>\r\n");
      out.write("\t\t\t\t</tr>\r\n");
      out.write("\t\t\t\t<tr>\r\n");
      out.write("\t\t\t\t\t<th>내용:</th>\r\n");
      out.write("\t\t\t\t\t<td>\r\n");
      out.write("\t\t\t\t\t\t <script src=\"https://cdn.ckeditor.com/4.14.1/standard/ckeditor.js\"></script>\r\n");
      out.write("\t\t\t\t\t\t <textarea name=\"content\"></textarea>\r\n");
      out.write("                \t\t <script>\r\n");
      out.write("                        \tCKEDITOR.replace( 'content' );\r\n");
      out.write("                \t\t</script>\r\n");
      out.write("\t\t\t\t\t</td>\r\n");
      out.write("\t\t\t\t</tr>\r\n");
      out.write("\t\t\t\t<tr>\r\n");
      out.write("\t\t\t\t\t<th>비밀번호:</th>\r\n");
      out.write("\t\t\t\t\t<td><input type=\"password\" name=\"pwd\" size=\"12\"/></td>\r\n");
      out.write("\t\t\t\t</tr>\r\n");
      out.write("\t\t\t\t<tr>\r\n");
      out.write("\t\t\t\t\t<td colspan=\"2\">\r\n");
      out.write("\t\t\t\t\t\t<input type=\"button\" value=\"보내기\" onclick=\"qnaSend_go(this.form)\"/>\r\n");
      out.write("\t\t\t\t\t\t<input type=\"reset\" value=\"다시\"/>\r\n");
      out.write("\t\t\t\t\t\t<input type=\"button\" value=\"목록\" onclick=\"qnaList_go(this.form)\"/>\r\n");
      out.write("\t\t\t\t\t</td>\r\n");
      out.write("\t\t\t\t</tr>\r\n");
      out.write("\t\t\t</tbody>\r\n");
      out.write("\t\t</table>\r\n");
      out.write("\t</form>\r\n");
      out.write("\t</div>\r\n");
      out.write("\t\r\n");
      out.write("\t");
      org.apache.jasper.runtime.JspRuntimeLibrary.include(request, response, "../frame/footer.jsp", out, false);
      out.write("\t\r\n");
      out.write("</body>\r\n");
      out.write("</html>\r\n");
      out.write("\r\n");
    } catch (java.lang.Throwable t) {
      if (!(t instanceof javax.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
